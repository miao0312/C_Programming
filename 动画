#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// 定义结构体表示点（类似原代码中的Dot结构体，用于存储字符相关信息及坐标）
typedef struct {
    int x;
    int y;
    char c;
} Dot;

// 全局变量，用于记录结构体数组a中有效元素个数，起到类似索引计数的作用
int len;
// 结构体数组，用于存储要显示的字符及其对应的坐标等信息
Dot a[10000000];
// 标记数组，用于记录对应结构体元素是否已经被显示过，防止重复显示某些元素（比如斜线）
int vis[10000000];
// 定义一个字符数组，存储一些用于显示的特殊字符，这里的ASCII码对应#、$、%、&、O
char c[5] = { 35, 36, 37, 38, 79 };
// 存储斜线字符的数组，用于组成图案中的斜线部分
char s[] = "/\\";
// 由用户输入的数字，用于控制图案的布局相关参数，范围限定在10 - 17
int n;
// 存储要显示的祝福语字符串
char me[] = "Merry Christmas!";
// 存储创建者相关信息及创建日期的字符串
char fm[] = "2024/12/19, create by [miao miao]";

// 移动光标函数，利用ANSI转义序列将光标移动到指定坐标位置
// 参数x表示横坐标，y表示纵坐标
void getcur(int x, int y) {
    // 使用ANSI转义序列，格式为\033[%d;%dH，用于将光标定位到终端相应位置
    printf("\033[%d;%dH", y, x);
}

// 输出字符并设置随机颜色（通过ANSI转义序列模拟颜色设置，简单设置前景色为16种颜色之一）
// 参数x为要输出字符的横坐标，y为纵坐标，c为要输出的字符
void goprint(int x, int y, char c) {
    // 生成一个0到15的随机数，用于选择16种颜色之一（这里简单模拟设置前景色）
    int color = rand() % 16;
    // 设置颜色的ANSI转义序列，格式为\033[38;5;<颜色代码>m，这里简化只用前景色
    // 通过此转义序列设置输出字符的颜色
    printf("\033[38;5;%dm", color);
    // 先将光标移动到指定坐标位置
    getcur(x, y);
    // 输出字符
    printf("%c", c);
    // 恢复默认颜色，使用\033[0m转义序列，避免影响后续输出的颜色显示
    printf("\033[0m");
}

// 清除指定坐标位置的字符（通过输出空格实现）
// 参数x为横坐标，y为纵坐标
void del(int x, int y) {
    // 将光标移动到指定坐标位置
    getcur(x, y);
    // 输出空格，相当于清除原来在此位置显示的字符
    printf(" ");
}

int main() {
    // 提示用户输入一个喜欢的数字（范围限定在10 - 17），并告知将终端窗口尽量调大
    printf("请输入你喜欢的一个数字（10 - 17），并将终端窗口尽量调大：\n");
    scanf("%d", &n);
    // 循环判断输入的数字是否在规定范围内，如果不在则要求重新输入
    while (n < 10 || n > 17) {
        printf("输入有误，请重新输入：\n");
        scanf("%d", &n);
    }

    // 计算图案的层数，根据输入的数字n来确定，这里是2 * n - 1层
    int Layer = 2 * n - 1;
    // 计算每层开头的空格数量，同样与输入数字n相关，随着层数增加而递减
    int Space = 2 * n - 2;
    // 外层循环控制层数
    for (int i = 1; i <= Layer; ++i) {
        // 如果当前层数是奇数层
        if (i & 1) {
            // 内层循环控制在当前奇数层上放置字符，每两个位置放置一个字符
            for (int j = 0; j < 2 * i; j += 2) {
                // 设置字符在终端的横坐标位置，结合了当前循环变量和空格数量等信息
                a[len].x = j + Space + 30;
                // 设置字符在终端的纵坐标位置，相对固定的起始行数加上当前层数
                a[len].y = i + 5;
                // 从字符数组c中随机选择一个字符，存入结构体数组a中
                a[len++].c = c[rand() % 5];
            }
            // 每层奇数层结束后，减少开头的空格数量，实现图案的缩进效果
            Space -= 2;
        }
        // 如果当前层数是偶数层
        else {
            int r = 0;
            // 内层循环同样控制在当前偶数层上放置字符，每两个位置放置一个斜线字符
            for (int j = 0; j < 2 * i; j += 2) {
                // 设置字符在终端的横坐标位置
                a[len].x = j + Space + 31;
                // 设置字符在终端的纵坐标位置
                a[len].y = i + 5;
                // 从斜线字符数组s中按顺序取出斜线字符（轮流取'/'和'\\'），存入结构体数组a中
                a[len++].c = s[r];
                // 切换斜线字符的索引，用于下次取另一个斜线字符
                r = (r + 1) % 2;
            }
        }
    }
    // 循环添加竖线字符，用于图案下方的装饰部分，循环次数与层数的三分之一加1有关
    for (int i = 0; i < Layer / 3 + 1; ++i) {
        // 设置竖线字符的横坐标位置
        a[len].x = Layer + 29;
        // 设置竖线字符的纵坐标位置
        a[len].y = i + 6 + Layer;
        // 将竖线字符存入结构体数组a中
        a[len++].c = '|';
        // 再次设置另一个相邻竖线字符的横坐标位置
        a[len].x = Layer + 30;
        // 设置其纵坐标位置
        a[len].y = i + 6 + Layer;
        // 存入竖线字符到结构体数组a中
        a[len++].c = '|';
    }
    // 循环添加祝福语字符串中的字符到结构体数组a中，以便后续显示
    for (int i = 0; i < strlen(me); ++i) {
        // 设置字符的横坐标位置，根据层数和相对偏移来确定
        a[len].x = Layer - 1 + i + 30;
        // 设置字符的纵坐标位置
        a[len].y = Layer / 3 + 10 + Layer;
        // 将祝福语中的当前字符存入结构体数组a中
        a[len++].c = me[i];
    }
    // 循环添加创建者相关信息字符串中的字符到结构体数组a中，以便后续显示
    for (int i = 0; i < strlen(fm); ++i) {
        // 设置字符的横坐标位置
        a[len].x = Layer - 1 + i + 30;
        // 设置字符的纵坐标位置
        a[len].y = Layer / 3 + 11 + Layer;
        // 将创建者相关信息字符串中的当前字符存入结构体数组a中
        a[len++].c = fm[i];
    }

    // 无限循环，用于不断随机显示结构体数组a中的字符，实现动态效果
    while (1) {
        // 随机选择一个结构体数组a中的元素索引
        int i = rand() % len;
        // 如果选择的字符是斜线字符（'/' 或 '\\'）且已经被显示过（通过vis数组标记）
        if ((a[i].c == '/' || a[i].c == '\\') && vis[i]) {
            // 则跳过本次循环，避免重复显示斜线字符（斜线只显示一次更符合效果需求）
            continue;
        }
        // 调用goprint函数，在指定坐标位置以随机颜色显示选择的字符
        goprint(a[i].x, a[i].y, a[i].c);
        // 标记该字符已经被显示过
        vis[i] = 1;
    }

    return 0;
}
